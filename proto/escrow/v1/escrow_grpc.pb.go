// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/escrow/v1/escrow.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EscrowService_UpdateStatus_FullMethodName = "/escrow.v1.EscrowService/UpdateStatus"
	EscrowService_GetEscrow_FullMethodName    = "/escrow.v1.EscrowService/GetEscrow"
)

// EscrowServiceClient is the client API for EscrowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EscrowServiceClient interface {
	// Update escrow status via external services (e.g., Payment)
	UpdateStatus(ctx context.Context, in *UpdateEscrowStatusRequest, opts ...grpc.CallOption) (*UpdateEscrowStatusResponse, error)
	// Get escrow details
	GetEscrow(ctx context.Context, in *GetEscrowRequest, opts ...grpc.CallOption) (*EscrowResponse, error)
}

type escrowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEscrowServiceClient(cc grpc.ClientConnInterface) EscrowServiceClient {
	return &escrowServiceClient{cc}
}

func (c *escrowServiceClient) UpdateStatus(ctx context.Context, in *UpdateEscrowStatusRequest, opts ...grpc.CallOption) (*UpdateEscrowStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEscrowStatusResponse)
	err := c.cc.Invoke(ctx, EscrowService_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) GetEscrow(ctx context.Context, in *GetEscrowRequest, opts ...grpc.CallOption) (*EscrowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EscrowResponse)
	err := c.cc.Invoke(ctx, EscrowService_GetEscrow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EscrowServiceServer is the server API for EscrowService service.
// All implementations must embed UnimplementedEscrowServiceServer
// for forward compatibility.
type EscrowServiceServer interface {
	// Update escrow status via external services (e.g., Payment)
	UpdateStatus(context.Context, *UpdateEscrowStatusRequest) (*UpdateEscrowStatusResponse, error)
	// Get escrow details
	GetEscrow(context.Context, *GetEscrowRequest) (*EscrowResponse, error)
	mustEmbedUnimplementedEscrowServiceServer()
}

// UnimplementedEscrowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEscrowServiceServer struct{}

func (UnimplementedEscrowServiceServer) UpdateStatus(context.Context, *UpdateEscrowStatusRequest) (*UpdateEscrowStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedEscrowServiceServer) GetEscrow(context.Context, *GetEscrowRequest) (*EscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEscrow not implemented")
}
func (UnimplementedEscrowServiceServer) mustEmbedUnimplementedEscrowServiceServer() {}
func (UnimplementedEscrowServiceServer) testEmbeddedByValue()                       {}

// UnsafeEscrowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EscrowServiceServer will
// result in compilation errors.
type UnsafeEscrowServiceServer interface {
	mustEmbedUnimplementedEscrowServiceServer()
}

func RegisterEscrowServiceServer(s grpc.ServiceRegistrar, srv EscrowServiceServer) {
	// If the following call pancis, it indicates UnimplementedEscrowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EscrowService_ServiceDesc, srv)
}

func _EscrowService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEscrowStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EscrowService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).UpdateStatus(ctx, req.(*UpdateEscrowStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_GetEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEscrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).GetEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EscrowService_GetEscrow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).GetEscrow(ctx, req.(*GetEscrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EscrowService_ServiceDesc is the grpc.ServiceDesc for EscrowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EscrowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "escrow.v1.EscrowService",
	HandlerType: (*EscrowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStatus",
			Handler:    _EscrowService_UpdateStatus_Handler,
		},
		{
			MethodName: "GetEscrow",
			Handler:    _EscrowService_GetEscrow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/escrow/v1/escrow.proto",
}
